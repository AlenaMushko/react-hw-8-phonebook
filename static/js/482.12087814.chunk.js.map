{"version":3,"file":"static/js/482.12087814.chunk.js","mappings":"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","sources":["components/App.styled.jsx","components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactEl/ContactEl.styled.jsx","components/ContactEl/ContactEl.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { theme } from '../styles/theme';\n\nexport const Container = styled.section`\n  margin: auto;\n  max-width: 350px;\n  padding: 16px;\n  font-size: 24px;\n`;\n\nexport const Title = styled.h1`\n  color: ${theme.colors.dark};\n  text-align: center;\n  font-size: 42px;\n`;\n\nexport const ContactsTitle = styled.h2`\n  text-align: center;\n  font-size: 42px;\n  margin-top: 24px;\n`;\n\nexport const Error = styled.b`\n  color: ${theme.colors.orange};\n  text-align: center;\n  font-size: 42px;\n`;","import styled from 'styled-components';\nimport { theme } from '../../styles/theme';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding: 20px;\n  background-color: ${theme.colors.light};\n  box-shadow: ${theme.shadows.small};\n  border-radius: 4px;\n  transition: box-shadow ${theme.animation.cubicBezier};\n  :hover {\n    box-shadow: ${theme.shadows.medium};\n  }\n`;\n\nexport const FormInput = styled.input`\n  width: 100%;\n  border: none;\n  font-size: ${theme.fontSizes.medium};\n  background-color: ${theme.colors.background};\n  color: ${theme.colors.dark};\n  :hover,\n  :focus {\n    outline: none;\n  }\n`;\n\nexport const FormButton = styled.button`\n  padding: 8px;\n  font-size: 16px;\n  margin: auto;\n  display: block;\n  width: 50%;\n  border: 2px solid ${theme.colors.light};\n  transition: background-color ${theme.animation.cubicBezier},\n    color ${theme.animation.cubicBezier};\n  :hover {\n    background-color: ${theme.colors.light};\n    color: ${theme.colors.dark};\n    border: 2px solid ${theme.colors.dark};\n    box-shadow: ${theme.shadows.regular};\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.phoneBook.contacts;\nexport const selectIsLoading = state => state.phoneBook.isLoading;\nexport const selectError = state => state.phoneBook.error;\nexport const selectFilter = state => state.phoneBook.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterValue) =>\n    contacts.filter(contact => contact.name.toLowerCase().includes(filterValue))\n);\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, FormInput, FormButton } from './ContactForm.styled';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const isContactRecorded = contacts.find(contact => contact.name === name);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    isContactRecorded\n      ? alert(`${name} is alreadi in contacts`)\n      : dispatch(addContact({ id: nanoid(), name, number }));\n    toast.success('new contact added');\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label htmlFor={nameId}>\n        Name\n        <FormInput\n          id={nameId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label htmlFor={numberId}>\n        Numbe\n        <FormInput\n          id={numberId}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\nimport { theme } from '../../styles/theme';\n\nexport const FilterContainer = styled.div`\n  padding: 20px;\n  background-color: ${theme.colors.dark};\n  color: ${theme.colors.light};\n  box-shadow: ${theme.shadows.small};\n  border-top-right-radius: 16px;\n  border-top-left-radius: 16px;\n  transition: box-shadow ${theme.animation.cubicBezier};\n  :hover {\n    box-shadow: ${theme.shadows.medium};\n  }\n`;\n\nexport const FilterInput = styled.input`\n  margin: auto;\n  border: none;\n  font-size: ${theme.fontSizes.medium};\n  background-color: ${theme.colors.yellow};\n  color: ${theme.colors.dark};\n  :hover,\n  :focus {\n    outline: none;\n  }\n`;\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { FilterInput, FilterContainer } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsSlice';\n\nexport const FilterContacts = () => {\n  const filterId = nanoid();\n  const dispatch = useDispatch();\n\n  const [FilterValue, setFilterValue] = useState('');\n  const changeFilter = e => {\n    setFilterValue(e.currentTarget.value);\n    dispatch(filterContacts(e.currentTarget.value.toLowerCase()));\n  };\n\n  return (\n    <FilterContainer>\n      <label htmlFor={filterId}>\n        Find contacts by name\n        <FilterInput\n          id={filterId}\n          type=\"text\"\n          name=\"filter\"\n          value={FilterValue}\n          onChange={changeFilter}\n        />\n      </label>\n    </FilterContainer>\n  );\n};\n","import styled from 'styled-components';\nimport { theme } from '../../styles/theme';\n\nexport const ElWraper = styled.div`\ndisplay: flex;\ngap:16px;\nfont-size:20px;\njustify-content: space-evenly;\nalign-items: center;\npadding: 12px;\n  background-color: ${theme.colors.light};\n  box-shadow: ${theme.shadows.medium};\n  border-radius: 12px;\n  transition: box-shadow ${theme.animation.cubicBezier};\n  :hover {\n    box-shadow: ${theme.shadows.regular};\n  }\n`;\n\nexport const ElButton = styled.button`\n  padding: 8px;\n  font-size: 16px;\n  margin: auto;\n  display: block;\n  border: 2px solid ${theme.colors.light};\n  transition: background-color ${theme.animation.cubicBezier},\n    color ${theme.animation.cubicBezier};\n  :hover {\n    background-color: ${theme.colors.light};\n    color: ${theme.colors.dark};\n    border: 2px solid ${theme.colors.dark};\n    box-shadow: ${theme.shadows.regular};\n  }\n`;\n\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ElWraper, ElButton } from './ContactEl.styled';\n\nexport const ContactEl = ({ contact }) => {\n  const dispatch = useDispatch();\n  const { id, name, number } = contact;\n  return (\n    <ElWraper>\n      <p>{name}:</p>\n      <span>{number}</span>\n      <ElButton type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        Delete\n      </ElButton>\n    </ElWraper>\n  );\n};\n\nContactEl.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\nimport { theme } from '../../styles/theme';\n\nexport const List = styled.ul`\n  padding: 16px;\n  border-bottom-left-radius: 16px;\n  border-bottom-right-radius: 16px;\n  background-color: ${theme.colors.light};\n  list-style:none;\n  box-shadow: ${theme.shadows.small};\n  `;\nexport const Item = styled.li`\n  :not(:first-child) {\n    margin-top: 28px;\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { ContactEl } from 'components/ContactEl';\nimport { List, Item } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <List>\n      {filteredContacts.map(contact => (\n        <Item key={contact.id}>\n          <ContactEl contact={contact} />\n        </Item>\n      ))}\n    </List>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactsTitle, Container, Title } from 'components/App.styled';\nimport { ContactForm } from 'components/ContactForm';\nimport { Discuss } from 'react-loader-spinner';\nimport { FilterContacts } from 'components/Filter';\nimport { ContactList } from 'components/ContactList';\nimport { selectContacts, selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Tasks() {\n const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Title>Phonebook</Title>\n      <ContactForm />\n      {isLoading && <Discuss />}\n      {error && <b>Sorry, something went wrong. Try again</b>}\n      {contacts.length > 0 && <>\n        <ContactsTitle>Contacts</ContactsTitle>\n        <FilterContacts />\n        <ContactList />\n      </>\n        }\n    </Container>\n  );\n}\n"],"names":["Container","styled","Title","theme","ContactsTitle","Form","FormInput","FormButton","selectContacts","state","phoneBook","contacts","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","filterValue","contact","name","toLowerCase","includes","ContactForm","useSelector","dispatch","useDispatch","useState","setName","number","setNumber","nameId","nanoid","numberId","handleChange","e","currentTarget","value","isContactRecorded","find","onSubmit","preventDefault","alert","addContact","id","toast","htmlFor","type","pattern","title","required","onChange","FilterContainer","FilterInput","FilterContacts","filterId","FilterValue","setFilterValue","filterContacts","ElWraper","ElButton","ContactEl","onClick","deleteContact","List","Item","ContactList","filteredContacts","map","Tasks","useEffect","fetchContacts","length"],"sourceRoot":""}